/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as pagesShopImport } from './routes/(pages)/shop'
import { Route as pagesPlacesImport } from './routes/(pages)/places'
import { Route as pagesExploreImport } from './routes/(pages)/explore'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const pagesShopRoute = pagesShopImport.update({
  id: '/(pages)/shop',
  path: '/shop',
  getParentRoute: () => rootRoute,
} as any)

const pagesPlacesRoute = pagesPlacesImport.update({
  id: '/(pages)/places',
  path: '/places',
  getParentRoute: () => rootRoute,
} as any)

const pagesExploreRoute = pagesExploreImport.update({
  id: '/(pages)/explore',
  path: '/explore',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/(pages)/explore': {
      id: '/(pages)/explore'
      path: '/explore'
      fullPath: '/explore'
      preLoaderRoute: typeof pagesExploreImport
      parentRoute: typeof rootRoute
    }
    '/(pages)/places': {
      id: '/(pages)/places'
      path: '/places'
      fullPath: '/places'
      preLoaderRoute: typeof pagesPlacesImport
      parentRoute: typeof rootRoute
    }
    '/(pages)/shop': {
      id: '/(pages)/shop'
      path: '/shop'
      fullPath: '/shop'
      preLoaderRoute: typeof pagesShopImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/explore': typeof pagesExploreRoute
  '/places': typeof pagesPlacesRoute
  '/shop': typeof pagesShopRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/explore': typeof pagesExploreRoute
  '/places': typeof pagesPlacesRoute
  '/shop': typeof pagesShopRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/(pages)/explore': typeof pagesExploreRoute
  '/(pages)/places': typeof pagesPlacesRoute
  '/(pages)/shop': typeof pagesShopRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/explore' | '/places' | '/shop'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/explore' | '/places' | '/shop'
  id:
    | '__root__'
    | '/'
    | '/(pages)/explore'
    | '/(pages)/places'
    | '/(pages)/shop'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  pagesExploreRoute: typeof pagesExploreRoute
  pagesPlacesRoute: typeof pagesPlacesRoute
  pagesShopRoute: typeof pagesShopRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  pagesExploreRoute: pagesExploreRoute,
  pagesPlacesRoute: pagesPlacesRoute,
  pagesShopRoute: pagesShopRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/(pages)/explore",
        "/(pages)/places",
        "/(pages)/shop"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/(pages)/explore": {
      "filePath": "(pages)/explore.tsx"
    },
    "/(pages)/places": {
      "filePath": "(pages)/places.tsx"
    },
    "/(pages)/shop": {
      "filePath": "(pages)/shop.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
